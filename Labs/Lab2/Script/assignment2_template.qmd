---
title: "Assignment 2: Spatial Analysis and Visualization"
subtitle: "Healthcare Access and Equity in Pennsylvania"
author: "Chloe Robinson"
date: today
format: 
  html:
    code-fold: false
    toc: true
    toc-location: left
    theme: cosmo
    embed-resources: true
execute:
  warning: false
  message: false
---

## Assignment Overview

**Learning Objectives:**
- Apply spatial operations to answer policy-relevant research questions
- Integrate census demographic data with spatial analysis
- Create publication-quality visualizations and maps
- Work with spatial data from multiple sources
- Communicate findings effectively for policy audiences

---

## Part 1: Healthcare Access for Vulnerable Populations

### Research Question

**Which Pennsylvania counties have the highest proportion of vulnerable populations (elderly + low-income) living far from hospitals?**

Your analysis should identify counties that should be priorities for healthcare investment and policy intervention.

### Required Analysis Steps

Complete the following analysis, documenting each step with code and brief explanations:

#### Step 1: Data Collection (5 points)

Load the required spatial data:
- Pennsylvania county boundaries
- Pennsylvania hospitals (from lecture data)
- Pennsylvania census tracts

**Your Task:**
```{r}
# Load required packages
library(sf)
library(tidyverse)
library(tigris)
library(tidycensus)
library(scales)
library(patchwork)
library(here)
library(knitr)
  
census_api_key("42bf8a20a3df1def380f330cf7edad0dd5842ce6") 

#load data
options(tigris_use_cache = TRUE, tigris_progress = FALSE)

pa_counties <- sf::st_read("Data/Pennsylvania_County_Boundaries.shp", quiet = TRUE)
hospitals   <- sf::st_read("Data/hospitals.geojson", quiet = TRUE)

suppressMessages(suppressWarnings({
  invisible(capture.output(
    { census_tracts <- tigris::tracts(state = "PA", cb = TRUE, year = 2022) },
    type = "message"
  ))
}))

census_tracts <- tracts(state = "PA", cb = TRUE, year = 2022)

# Check that all data loaded correctly

hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))

invisible(st_crs(hospitals))
invisible(st_crs(census_tracts))
invisible(st_crs(pa_counties))
```

**Questions to answer:**
- How many hospitals are in your dataset? 223
- How many census tracts? 3445
- What coordinate reference system is each dataset in? WGS 84

---

#### Step 2: Get Demographic Data 

Use `tidycensus` to download tract-level demographic data for Pennsylvania.

**Required variables:**
- Total population
- Median household income
- Population 65 years and over (you may need to sum multiple age categories)

**Your Task:**
```{r}
# Get demographic data from ACS
demographics <- get_acs(
  geography = "tract",
  variables = c(
    total_pop = "B01003_001",
    median_income = "B19013_001"
  ),
  state = "PA",
  year = 2022,
  survey = "acs5",
  output = "wide"
)

over_65_vars <- c(
  "B01001_020", "B01001_021", "B01001_022", "B01001_023", "B01001_024", "B01001_025",
  "B01001_044", "B01001_045", "B01001_046", "B01001_047", "B01001_048", "B01001_049"
)

over_65 <- get_acs(
  geography = "tract",
  state = "PA",
  year = 2022,
  survey = "acs5",
  variables = over_65_vars,
  output = "wide"
)


# sum across all the *_E columns (estimates)
over_65 <- transform(
  over_65,
  over65_total = B01001_020E + B01001_021E + B01001_022E +
                 B01001_023E + B01001_024E + B01001_025E +
                 B01001_044E + B01001_045E + B01001_046E +
                 B01001_047E + B01001_048E + B01001_049E
)

# Join to tract boundaries
demographics_boundaries <- census_tracts %>%
  left_join(demographics, by = "GEOID") %>%
  left_join(over_65 %>% select(GEOID, over65_total), by = "GEOID")

#How many tracts have missing income data?
sum(is.na(demographics$median_incomeE))

#Median income across all PA census tracts?
median(demographics$median_incomeE, na.rm = TRUE)

```

**Questions to answer:**
- What year of ACS data are you using? 2022
- How many tracts have missing income data? 63
- What is the median income across all PA census tracts? $70,188

---

#### Step 3: Define Vulnerable Populations 

Identify census tracts with vulnerable populations based on TWO criteria:
1. Low median household income (choose an appropriate threshold)
2. Significant elderly population (choose an appropriate threshold)

**Your Task:**
```{r}
# Filter for vulnerable tracts based on your criteria
low_income_threshold <- 50000

demographics_boundaries <- demographics_boundaries %>%
  mutate(low_income = median_incomeE < low_income_threshold)

#Number of tracts below the median income of 50000
sum(demographics_boundaries$low_income, na.rm = TRUE)

#Percent of each tract with population over 65
high_elderly_threshold <- 0.20

demographics_boundaries <- demographics_boundaries %>%
  mutate(pct_over_65 = over65_total /total_popE)

demographics_boundaries <- demographics_boundaries %>%
  mutate(
    low_income = median_incomeE < low_income_threshold,
    high_elderly = pct_over_65 >= high_elderly_threshold,
    vulnerable = low_income & high_elderly
  )

table(demographics_boundaries$vulnerable)

vulnerable_tracts <- demographics_boundaries %>%
  filter(vulnerable == TRUE)



```

**Questions to answer:**
- What income threshold did you choose and why? The median income is $70,188, so I chose $50,000 as the low income threshold as it's below the median income.
- What elderly population threshold did you choose and why? I chose 20% because the US Census Bureau states that in 2022, 17.3% of the U.S. were over the age of 65. 
- How many tracts meet your vulnerability criteria? 171
- What percentage of PA census tracts are considered vulnerable by your definition? 4.96% 

---

#### Step 4: Calculate Distance to Hospitals 

For each vulnerable tract, calculate the distance to the nearest hospital.

**Your Task:**
```{r}
# Transform to appropriate projected CRS - need to do math calculations in projected
vulnerable_tracts_proj <- vulnerable_tracts %>%
  st_transform(3365)

hospitals_proj <- hospitals %>%
  st_transform(3365)

# Find tract centroids
tract_centroids <- st_point_on_surface(vulnerable_tracts_proj)

# Nearest hospital for each tract
nearest_hospitals <- st_nearest_feature(tract_centroids, hospitals_proj)

# Dist
tract_distances <- st_distance(
  tract_centroids,
  hospitals_proj[nearest_hospitals, ],
  by_element = TRUE
)

# Convert feet to miles & go back to original crs now that the math calc is done
vulnerable_tracts <- vulnerable_tracts %>%
  mutate(
    dist_ft = as.numeric(tract_distances),
    dist_mi = dist_ft / 5280
  )

avg_dist_mi <- mean(vulnerable_tracts$dist_mi, na.rm = TRUE)
max_dist_mi <- max(vulnerable_tracts$dist_mi, na.rm = TRUE)
vulnerable_over_15   <- sum(vulnerable_tracts$dist_mi > 15, na.rm = TRUE)

summary(vulnerable_tracts$dist_mi)

vuln_dist <- vulnerable_tracts %>%
  st_drop_geometry() %>%
  dplyr::filter(!is.na(dist_mi))

ggplot(vuln_dist, aes(x = dist_mi)) +
  geom_histogram(binwidth = 1, color = "white", fill = "#9ecae1", boundary = 0, closed = "left") +
  geom_vline(xintercept = 15, linetype = "dashed") +
  labs(
    title = "Distance to Nearest Hospital (Vulnerable Tracts)",
    x = "Distance to nearest hospital (miles)",
    y = "Number of vulnerable tracts",
    caption = "Dashed line = 15-mile threshold. Most vulnerable tracts are within a few miles."
  ) +
  theme_minimal()


```

**Requirements:**
- Use an appropriate projected coordinate system for Pennsylvania - PA South State Plane 3365
- Calculate distances in miles
- Explain why you chose your projection - This projection is good for calculating areas and distances in Pennsylvania 

**Questions to answer:**
- What is the average distance to the nearest hospital for vulnerable tracts? 3.59
- What is the maximum distance? 19.91
- How many vulnerable tracts are more than 15 miles from the nearest hospital? 7

---

#### Step 5: Identify Underserved Areas 

Define "underserved" as vulnerable tracts that are more than 15 miles from the nearest hospital.

**Your Task:**
```{r}
# Create underserved variable
vulnerable_tracts <- vulnerable_tracts %>%
  mutate(underserved = dist_mi > 15)

number_vulnerable      <- nrow(vulnerable_tracts)
number_underserved     <- sum(vulnerable_tracts$underserved, na.rm = TRUE)
pct_underserved   <- 100 * number_underserved / number_vulnerable

# Summary data frame
summary_table <- data.frame(
  Metric = c(
    "Total vulnerable tracts",
    "Underserved tracts (>15 miles)",
    "Percent underserved"
  ),
  Value = c(
    number_vulnerable,
    number_underserved,
    paste0(round(pct_underserved, 2), "%")
  )
)

# Display as a formatted table
kable(summary_table,
      caption = "Summary of Vulnerable and Underserved Census Tracts in Pennsylvania",
      align = c("l", "r"))


```

**Questions to answer:**
- How many tracts are underserved? 7
- What percentage of vulnerable tracts are underserved? 4.09%
- Does this surprise you? Why or why not?

---

#### Step 6: Aggregate to County Level

Use spatial joins and aggregation to calculate county-level statistics about vulnerable populations and hospital access.

**Your Task:**
```{r}
# Spatial join tracts to counties
vuln_for_join <- vulnerable_tracts %>%
  st_transform(st_crs(pa_counties))

# Spatial join: attach county names to vulnerable tracts
vuln_county <- vuln_for_join %>%
  st_join(pa_counties %>% select(COUNTY_NAM), left = TRUE)

# Aggregate statistics by county
county_stats <- pa_counties %>%
  st_drop_geometry() %>%
  select(COUNTY_NAM) %>%
  left_join(
    vuln_county %>%
      st_drop_geometry() %>%
      group_by(COUNTY_NAM) %>%
      summarise(
        vulnerable_tracts    = n(),
        underserved_tracts   = sum(underserved, na.rm = TRUE),
        avg_dist_mi          = mean(dist_mi, na.rm = TRUE),
        vulnerable_pop       = sum(over65_total, na.rm = TRUE),
        underserved_vuln_pop = sum(ifelse(underserved, over65_total, 0), na.rm = TRUE),
        .groups = "drop"
      ),
    by = "COUNTY_NAM"
  ) %>%
  mutate(
    across(c(vulnerable_tracts, underserved_tracts, avg_dist_mi,
             vulnerable_pop, underserved_vuln_pop),
           ~ tidyr::replace_na(., 0)),
    pct_underserved = dplyr::if_else(
      vulnerable_tracts > 0,
      100 * underserved_tracts / vulnerable_tracts,
      0
    )
  )

top5_pct_underserved <- county_stats %>%
  arrange(desc(pct_underserved), desc(avg_dist_mi)) %>%
  slice_head(n = 5) %>%
  pull(COUNTY_NAM)

top5_vuln_people_far <- county_stats %>%
  arrange(desc(underserved_vuln_pop)) %>%
  slice_head(n = 5) %>%
  pull(COUNTY_NAM)

```

**Questions to answer:**
- Which 5 counties have the highest percentage of underserved vulnerable tracts? Clarion, Monroe, Perry, Cameron, Cleanfield
- Which counties have the most vulnerable people living far from hospitals? Clearfield, Elk, Clarion, Forest, Venango, Warren
- Are there any patterns in where underserved counties are located?

---

#### Step 7: Create Summary Table 

Create a professional table showing the top 10 priority counties for healthcare investment.

**Your Task:**
```{r}
# Create and format priority counties table
priority_counties <- county_stats %>%
  arrange(desc(underserved_vuln_pop), desc(pct_underserved), desc(avg_dist_mi)) %>%
  mutate(
    County                   = COUNTY_NAM,
    `Vulnerable tracts`      = vulnerable_tracts,
    `Underserved tracts`     = underserved_tracts,
    `% underserved`          = scales::percent(pct_underserved / 100, accuracy = 0.1),
    `Avg distance (mi)`      = round(avg_dist_mi, 1),
    `Vulnerable pop (65+)`   = scales::comma(vulnerable_pop),
    `Underserved vuln pop`   = scales::comma(underserved_vuln_pop)
  ) %>%
  select(
    County,
    `Vulnerable tracts`,
    `Underserved tracts`,
    `% underserved`,
    `Avg distance (mi)`,
    `Vulnerable pop (65+)`,
    `Underserved vuln pop`
  ) %>%
  head(10)

knitr::kable(
  priority_counties,
  caption = "Top 10 Pennsylvania counties to prioritize for healthcare access investment (ranked by number of vulnerable 65+ residents living >15 miles from a hospital, then % underserved).",
  align = c("l","r","r","r","r","r","r")
)



```

**Requirements:**
- Use `knitr::kable()` or similar for formatting
- Include descriptive column names
- Format numbers appropriately (commas for population, percentages, etc.)
- Add an informative caption
- Sort by priority (you decide the metric)

---

## Part 2: Comprehensive Visualization 

Using the skills from Week 3 (Data Visualization), create publication-quality maps and charts.

### Map 1: County-Level Choropleth 

Create a choropleth map showing healthcare access challenges at the county level.

**Your Task:**
```{r}
# Change NA to 0
county_stats <- county_stats %>%
  mutate(
    pct_underserved = ifelse(is.na(pct_underserved), 0, pct_underserved)
  )

# County level access map
pa_counties_map <- pa_counties %>%
  left_join(county_stats, by = "COUNTY_NAM")

# Hospitals have same CRS as the map layer
hospitals_map <- st_transform(hospitals, st_crs(pa_counties_map))

# Choropleth: % of vulnerable tracts that are underserved
ggplot() +
  geom_sf(data = pa_counties_map,
          aes(fill = pct_underserved),
          color = "white", size = 0.3) +
  geom_sf(data = hospitals_map,
          color = "black", size = 0.6, alpha = 0.7, show.legend = FALSE) +
  scale_fill_gradient(
    low = "#fff5eb", high = "#cb181d",                 # light → red
    limits = c(0, 100), breaks = c(0, 25, 50, 75, 100),
    labels = scales::percent_format(scale = 1),
    name = "Percent"
  ) +
  labs(
    title = "Healthcare Access Challenges by County",
    subtitle = "Percent of vulnerable census tracts located > 15 miles from hospitals within each county in PA",
  ) +
  theme_void()
```


---

### Map 2: Detailed Vulnerability Map 

Create a map highlighting underserved vulnerable tracts.

**Your Task:**
```{r}
# Create detailed tract-level map
base_tracts <- census_tracts %>% st_transform(st_crs(pa_counties))
vuln_map    <- vulnerable_tracts %>%
  st_transform(st_crs(pa_counties)) %>%
  mutate(status = ifelse(underserved, "Underserved (>15 mi)", "Vulnerable (≤15 mi)"))
hosp_map    <- hospitals %>% st_transform(st_crs(pa_counties))

#Plot
ggplot() +
  geom_sf(data = base_tracts, fill = "#f3f3f3", color = "grey90", linewidth = 0.15, show.legend = FALSE) +
  geom_sf(data = vuln_map, aes(fill = status), color = NA, alpha = 0.9) +
  geom_sf(data = pa_counties, fill = NA, color = "white", linewidth = 0.4) +
  geom_sf(data = hosp_map, color = "black", size = 0.6, alpha = 0.7, show.legend = FALSE) +
  scale_fill_manual(
    values = c("Vulnerable (≤15 mi)" = "#fdd0a2",
               "Underserved (>15 mi)" = "#cb181d"),
    name = "Tract categories\n(Vulnerable = median income < $50k & 65+ ≥ 20%)",
    labels = c(
      "Underserved (>15 mi)" = "Underserved: vulnerable & >15 mi",
      "Vulnerable (≤15 mi)" = "Vulnerable: ≤15 mi"
    )
  ) +
  guides(fill = guide_legend(title.position = "top")) +
  labs(
    title = "Underserved Vulnerable Tracts",
    subtitle = "Red = vulnerable tracts >15 miles from hospitals; Orange = vulnerable tracts ≤15 miles",
  ) +
  theme_void() +
  theme(legend.position = "right")


```

---

### Chart: Distribution Analysis

Create a visualization showing the distribution of distances to hospitals for vulnerable populations.

**Your Task:**
```{r}
# Create distribution visualization
vuln_dist <- vulnerable_tracts %>%
  sf::st_drop_geometry() %>%
  filter(is.finite(dist_mi)) %>%
  mutate(
    w65 = pmax(over65_total, 0)  
  )

ggplot(
  vulnerable_tracts %>% sf::st_drop_geometry() %>%
    filter(is.finite(dist_mi)) %>%
    mutate(w65 = dplyr::coalesce(over65_total, 0)),
  aes(x = dist_mi)
) +
  geom_histogram(
    binwidth = 1, boundary = 0, closed = "left",
    aes(weight = w65, y = ..count.. / sum(..count..)),
    color = "white", fill = "#9ecae1"
  ) +
  geom_vline(xintercept = 15, linetype = "dashed") +
  scale_y_continuous(labels = scales::percent) +
  labs(
    title = "Distance to Nearest Hospital — Population-Weighted (65+ in vulnerable tracts)",
    x = "Distance to nearest hospital (miles)",
    y = "Share of vulnerable 65+ residents"
  ) +
  theme_minimal()
```

**Interpretation**
- Most vulnerable tracts are only a few miles from a hospital. Only a small amount exceed the 15-Mile threshold, suggesting access problems are in rural areas.

---

## Part 3: Bring Your Own Data Analysis 
---

#### Public Safety & Justice

**Crime & Community Resources**
- **Data:** Crime Incidents, Recreation Centers, Libraries, Street Lights
- **Question:** "Are high-crime areas underserved by community resources?"
- **Operations:** Aggregate crime counts to census tracts or neighborhoods, count community resources per area, spatial correlation analysis
- **Policy relevance:** Community investment, violence prevention strategies
---

### Data Sources

**OpenDataPhilly:** https://opendataphilly.org/datasets/
- Most datasets available as GeoJSON, Shapefile, or CSV with coordinates
- Always check the Metadata for a data dictionary of the fields.

**Additional Sources:**
- **Pennsylvania Open Data:** https://data.pa.gov/
- **Census Bureau (via tidycensus):** Demographics, economic indicators, commute patterns
- **TIGER/Line (via tigris):** Geographic boundaries

### Your Analysis

**Your Task:**

1. **Find and load additional data**

```{r}
# Crime Data
crime <- st_read("Data/incidents_part1_part2/incidents_part1_part2.shp", quiet = TRUE) %>%
  st_transform(3365)

libraries <- st_read("Data/Library/geo_export_57b98a32-c68d-462f-b3e9-187c05ad2dcd.shp", quiet = TRUE) %>%
  st_transform(3365)

rec_centers <- st_read("Data/PPR_Program_Sites/PPR_Program_Sites.shp", quiet = TRUE) %>%
  st_transform(3365)

# Philly boundary
pa_counties <- counties("PA", cb = TRUE, year = 2022) %>% st_transform(3365)
philly <- pa_counties %>% filter(NAME == "Philadelphia")

# Clip to philly boundary
crime       <- st_filter(crime,       philly, .predicate = st_intersects)
libraries   <- st_filter(libraries,   philly, .predicate = st_intersects)
rec_centers <- st_filter(rec_centers, philly, .predicate = st_intersects)

crime_homicide_all <- crime %>%
  dplyr::filter(trimws(text_gener) == "Homicide - Criminal")

```

---

For this analysis I combined three Philadelphia datasets: Police Incidents (Part I & II) to capture where and what types of crimes occur, Parks & Recreation Program Sites – Recreation Centers, and Free Library branch locations to represent nearby community resources. The crime and recreation data came from OpenDataPhilly, and the library locations from data.pa.gov. After cleaning, the working sample included 153,657 crime incidents, 171 recreation centers, and 5,830 library points. The original files provided coordinates in WGS 84 (EPSG:4326); because I compute distances and walking‐access buffers, I projected everything to Pennsylvania State Plane South (EPSG:3365), which uses feet—appropriate for accurate 0.5-mile (2,640 ft) buffers and tract-level distance measures.

---

3. **Conduct spatial analysis**

Use at least TWO spatial operations to answer your research question.

**Required operations (choose 2+):**
- Buffers
- Spatial joins
- Spatial filtering with predicates
- Distance calculations
- Intersections or unions
- Point-in-polygon aggregation

```{r}

# Resource buffers (0.25 mile = 1,320 ft) 
buffer_ft <- 1320

resources <- bind_rows(
  libraries   %>% transmute(type = "Library",    geometry = st_geometry(.)),
  rec_centers %>% transmute(type = "Rec Center", geometry = st_geometry(.))
)

resources_buf_union <- resources %>%
  st_buffer(dist = buffer_ft) %>%
  st_union() %>%
  st_make_valid()

# Load tracts and population, compute tract area
phl_tracts <- tracts("PA", county = "Philadelphia", cb = TRUE, year = 2022) %>%
  st_transform(3365) %>%
  mutate(area_ft2 = as.numeric(st_area(geometry))) %>%
  select(GEOID, NAME, area_ft2, geometry)

pop <- get_acs(
  geography = "tract",
  variables = c(total_pop = "B01003_001"),
  state = "PA", county = "Philadelphia",
  year = 2022, output = "wide"
) %>% select(GEOID, total_pop = total_popE)

phl_tracts <- phl_tracts %>% left_join(pop, by = "GEOID")

# % of tract area within 0.25 miles of any resource
access_area_any <- phl_tracts %>%
  st_intersection(resources_buf_union) %>%
  mutate(covered_area_ft2_any = as.numeric(st_area(geometry))) %>%
  st_drop_geometry() %>%
  group_by(GEOID) %>%
  summarise(covered_area_ft2_any = sum(covered_area_ft2_any, na.rm = TRUE), .groups = "drop")

tract_access_any <- phl_tracts %>%
  left_join(access_area_any, by = "GEOID") %>%
  mutate(
    covered_area_ft2_any = coalesce(covered_area_ft2_any, 0),
    pct_area_any         = 100 * covered_area_ft2_any / area_ft2,
    people_within_025mi  = round(total_pop * (pct_area_any / 100), 0)
  ) %>%
  select(GEOID, NAME, total_pop, pct_area_any, people_within_025mi, geometry)

# Homicides Only
crime_homicide_all <- crime %>%
  dplyr::filter(trimws(text_gener) == "Homicide - Criminal")

# Per-tract homicide counts & rate per 100k (using ACS 2022 pop)
crime_by_tract <- crime_homicide_all %>%
  st_join(phl_tracts %>% select(GEOID), left = FALSE) %>%
  st_drop_geometry() %>%
  count(GEOID, name = "homicide_cnt")

tract_access_crime <- tract_access_any %>%
  left_join(crime_by_tract, by = "GEOID") %>%
  mutate(
    homicide_cnt       = replace_na(homicide_cnt, 0),
    homicide_rate_100k = if_else(total_pop > 0, homicide_cnt / total_pop * 1e5, NA_real_)
  )

# Thresholds
access_thresh_pct    <- 50   
homicide_thresh_100k <- 30   

# Map 1: Access
ggplot() +
  geom_sf(data = tract_access_any, aes(fill = pct_area_any), color = NA) +
  geom_sf(data = resources, color = "black", size = 0.3, alpha = 0.5, show.legend = FALSE) +
  scale_fill_viridis_c(
    name   = "% of tract area within 0.25 mi (library or rec center)",
    limits = c(0, 100),
    labels = function(x) paste0(x, "%")
  ) +
  labs(
    title    = "Access to Libraries & Rec Centers (0.25-mile buffers)",
    subtitle = "Philadelphia census tracts",
  ) +
  theme_void()

# Map 2: Homicides and Access 
tract_access_crime_map <- tract_access_crime %>%
  mutate(
    category = case_when(
      pct_area_any <= access_thresh_pct & homicide_rate_100k >= homicide_thresh_100k ~ "High crime & underserved",
      homicide_rate_100k >= homicide_thresh_100k                                     ~ "High crime only",
      pct_area_any <= access_thresh_pct                                              ~ "Underserved only",
      TRUE                                                                           ~ "Adequate access & low homicide"
    ),
    category = forcats::fct_relevel(
      category,
      "High crime & underserved","High crime only","Underserved only","Adequate access & low homicide"
    )
  )

ggplot() +
  geom_sf(data = tract_access_crime_map, aes(fill = category), color = NA) +
  geom_sf(data = resources, color = "black", size = 0.3, alpha = 0.5, show.legend = FALSE) +
  labs(
    title = "Resource Access and Homicides in Philadelphia",
    subtitle = paste0("Underserved ≤", access_thresh_pct, "% area within 0.25 mi; ",
                      "High homicide ≥", homicide_thresh_100k, " per 100k")
  ) +
  theme_void() +
  theme(legend.position = "right")

```

**Analysis requirements:**
- Clear code comments explaining each step
- Appropriate CRS transformations
- Summary statistics or counts
- At least one map showing your findings
- Brief interpretation of results (3-5 sentences)

**Your interpretation:**

Most Philadelphia tract areas are within a .25 mile of a library or rec center. With underserved tracts being defined as ≤50% coverage within proximity to a library or rec center, high homicide ≥30 per 100k people, only a small amount of neighborhoods fall into “High homicide & underserved" category. This means that there is no definite correlation between areas that are underserved by community resources and homicides. Center City Philadelphia has the most access to resources, with many tracts in the rural area being underserved and low homicides.

## Finally - A few comments about your incorporation of feedback!
Feedback from the first lab said that I needed to provide more explanations of what I'm doing. It also said to hide the setup code block, I tried to do that but I couldn't figure out how to. It also said to print things in my console if it's just for personal reference, so I did that in this assignment. 

---

## Submission Requirements

**What to submit:**

1. **Rendered HTML document posted to your course portfolio** with all code, outputs, maps, and text
   - Use `embed-resources: true` in YAML so it's a single file
   - All code should run without errors
   - All maps and charts should display correctly

**File naming:** `LastName_FirstName_Assignment2.html` and `LastName_FirstName_Assignment2.qmd`

---

